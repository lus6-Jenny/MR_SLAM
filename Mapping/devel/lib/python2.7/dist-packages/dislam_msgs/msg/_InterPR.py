# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dislam_msgs/InterPR.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class InterPR(genpy.Message):
  _md5sum = "5b4beb7f05ebd7c0cec036a4e93d3373"
  _type = "dislam_msgs/InterPR"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 id0
int64 id1
bool isAerial
bool isChecked
geometry_msgs/Pose id0Pose
geometry_msgs/Pose factorPose
sensor_msgs/PointCloud2 keyframe
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field
"""
  __slots__ = ['id0','id1','isAerial','isChecked','id0Pose','factorPose','keyframe']
  _slot_types = ['int64','int64','bool','bool','geometry_msgs/Pose','geometry_msgs/Pose','sensor_msgs/PointCloud2']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id0,id1,isAerial,isChecked,id0Pose,factorPose,keyframe

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InterPR, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id0 is None:
        self.id0 = 0
      if self.id1 is None:
        self.id1 = 0
      if self.isAerial is None:
        self.isAerial = False
      if self.isChecked is None:
        self.isChecked = False
      if self.id0Pose is None:
        self.id0Pose = geometry_msgs.msg.Pose()
      if self.factorPose is None:
        self.factorPose = geometry_msgs.msg.Pose()
      if self.keyframe is None:
        self.keyframe = sensor_msgs.msg.PointCloud2()
    else:
      self.id0 = 0
      self.id1 = 0
      self.isAerial = False
      self.isChecked = False
      self.id0Pose = geometry_msgs.msg.Pose()
      self.factorPose = geometry_msgs.msg.Pose()
      self.keyframe = sensor_msgs.msg.PointCloud2()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q2B14d3I().pack(_x.id0, _x.id1, _x.isAerial, _x.isChecked, _x.id0Pose.position.x, _x.id0Pose.position.y, _x.id0Pose.position.z, _x.id0Pose.orientation.x, _x.id0Pose.orientation.y, _x.id0Pose.orientation.z, _x.id0Pose.orientation.w, _x.factorPose.position.x, _x.factorPose.position.y, _x.factorPose.position.z, _x.factorPose.orientation.x, _x.factorPose.orientation.y, _x.factorPose.orientation.z, _x.factorPose.orientation.w, _x.keyframe.header.seq, _x.keyframe.header.stamp.secs, _x.keyframe.header.stamp.nsecs))
      _x = self.keyframe.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe.height, _x.keyframe.width))
      length = len(self.keyframe.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe.is_bigendian, _x.keyframe.point_step, _x.keyframe.row_step))
      _x = self.keyframe.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.keyframe.is_dense
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.id0Pose is None:
        self.id0Pose = geometry_msgs.msg.Pose()
      if self.factorPose is None:
        self.factorPose = geometry_msgs.msg.Pose()
      if self.keyframe is None:
        self.keyframe = sensor_msgs.msg.PointCloud2()
      end = 0
      _x = self
      start = end
      end += 142
      (_x.id0, _x.id1, _x.isAerial, _x.isChecked, _x.id0Pose.position.x, _x.id0Pose.position.y, _x.id0Pose.position.z, _x.id0Pose.orientation.x, _x.id0Pose.orientation.y, _x.id0Pose.orientation.z, _x.id0Pose.orientation.w, _x.factorPose.position.x, _x.factorPose.position.y, _x.factorPose.position.z, _x.factorPose.orientation.x, _x.factorPose.orientation.y, _x.factorPose.orientation.z, _x.factorPose.orientation.w, _x.keyframe.header.seq, _x.keyframe.header.stamp.secs, _x.keyframe.header.stamp.nsecs,) = _get_struct_2q2B14d3I().unpack(str[start:end])
      self.isAerial = bool(self.isAerial)
      self.isChecked = bool(self.isChecked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe.height, _x.keyframe.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe.is_bigendian, _x.keyframe.point_step, _x.keyframe.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe.is_bigendian = bool(self.keyframe.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe.data = str[start:end]
      start = end
      end += 1
      (self.keyframe.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.keyframe.is_dense = bool(self.keyframe.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q2B14d3I().pack(_x.id0, _x.id1, _x.isAerial, _x.isChecked, _x.id0Pose.position.x, _x.id0Pose.position.y, _x.id0Pose.position.z, _x.id0Pose.orientation.x, _x.id0Pose.orientation.y, _x.id0Pose.orientation.z, _x.id0Pose.orientation.w, _x.factorPose.position.x, _x.factorPose.position.y, _x.factorPose.position.z, _x.factorPose.orientation.x, _x.factorPose.orientation.y, _x.factorPose.orientation.z, _x.factorPose.orientation.w, _x.keyframe.header.seq, _x.keyframe.header.stamp.secs, _x.keyframe.header.stamp.nsecs))
      _x = self.keyframe.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.keyframe.height, _x.keyframe.width))
      length = len(self.keyframe.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframe.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.keyframe.is_bigendian, _x.keyframe.point_step, _x.keyframe.row_step))
      _x = self.keyframe.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.keyframe.is_dense
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.id0Pose is None:
        self.id0Pose = geometry_msgs.msg.Pose()
      if self.factorPose is None:
        self.factorPose = geometry_msgs.msg.Pose()
      if self.keyframe is None:
        self.keyframe = sensor_msgs.msg.PointCloud2()
      end = 0
      _x = self
      start = end
      end += 142
      (_x.id0, _x.id1, _x.isAerial, _x.isChecked, _x.id0Pose.position.x, _x.id0Pose.position.y, _x.id0Pose.position.z, _x.id0Pose.orientation.x, _x.id0Pose.orientation.y, _x.id0Pose.orientation.z, _x.id0Pose.orientation.w, _x.factorPose.position.x, _x.factorPose.position.y, _x.factorPose.position.z, _x.factorPose.orientation.x, _x.factorPose.orientation.y, _x.factorPose.orientation.z, _x.factorPose.orientation.w, _x.keyframe.header.seq, _x.keyframe.header.stamp.secs, _x.keyframe.header.stamp.nsecs,) = _get_struct_2q2B14d3I().unpack(str[start:end])
      self.isAerial = bool(self.isAerial)
      self.isChecked = bool(self.isChecked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyframe.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keyframe.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.keyframe.height, _x.keyframe.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframe.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.keyframe.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.keyframe.is_bigendian, _x.keyframe.point_step, _x.keyframe.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.keyframe.is_bigendian = bool(self.keyframe.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.keyframe.data = str[start:end]
      start = end
      end += 1
      (self.keyframe.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.keyframe.is_dense = bool(self.keyframe.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2q2B14d3I = None
def _get_struct_2q2B14d3I():
    global _struct_2q2B14d3I
    if _struct_2q2B14d3I is None:
        _struct_2q2B14d3I = struct.Struct("<2q2B14d3I")
    return _struct_2q2B14d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
