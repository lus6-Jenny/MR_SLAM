// Generated by gencpp from file slam_msg/Keyframe.msg
// DO NOT EDIT!


#ifndef SLAM_MSG_MESSAGE_KEYFRAME_H
#define SLAM_MSG_MESSAGE_KEYFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slam_msg
{
template <class ContainerAllocator>
struct Keyframe_
{
  typedef Keyframe_<ContainerAllocator> Type;

  Keyframe_()
    : id(0)
    , position()
    , rotation()  {
      position.assign(0.0);

      rotation.assign(0.0);
  }
  Keyframe_(const ContainerAllocator& _alloc)
    : id(0)
    , position()
    , rotation()  {
  (void)_alloc;
      position.assign(0.0);

      rotation.assign(0.0);
  }



   typedef int32_t _id_type;
  _id_type id;

   typedef boost::array<double, 3>  _position_type;
  _position_type position;

   typedef boost::array<float, 4>  _rotation_type;
  _rotation_type rotation;





  typedef boost::shared_ptr< ::slam_msg::Keyframe_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_msg::Keyframe_<ContainerAllocator> const> ConstPtr;

}; // struct Keyframe_

typedef ::slam_msg::Keyframe_<std::allocator<void> > Keyframe;

typedef boost::shared_ptr< ::slam_msg::Keyframe > KeyframePtr;
typedef boost::shared_ptr< ::slam_msg::Keyframe const> KeyframeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slam_msg::Keyframe_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slam_msg::Keyframe_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slam_msg::Keyframe_<ContainerAllocator1> & lhs, const ::slam_msg::Keyframe_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.rotation == rhs.rotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slam_msg::Keyframe_<ContainerAllocator1> & lhs, const ::slam_msg::Keyframe_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slam_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::slam_msg::Keyframe_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_msg::Keyframe_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_msg::Keyframe_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_msg::Keyframe_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_msg::Keyframe_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_msg::Keyframe_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slam_msg::Keyframe_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ace3b589326bfcbd3ee9253849bfdab";
  }

  static const char* value(const ::slam_msg::Keyframe_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ace3b589326bfcbULL;
  static const uint64_t static_value2 = 0xd3ee9253849bfdabULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_msg::Keyframe_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slam_msg/Keyframe";
  }

  static const char* value(const ::slam_msg::Keyframe_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slam_msg::Keyframe_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"float64[3] position\n"
"float32[4] rotation\n"
;
  }

  static const char* value(const ::slam_msg::Keyframe_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slam_msg::Keyframe_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Keyframe_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_msg::Keyframe_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slam_msg::Keyframe_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "rotation[]" << std::endl;
    for (size_t i = 0; i < v.rotation.size(); ++i)
    {
      s << indent << "  rotation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAM_MSG_MESSAGE_KEYFRAME_H
