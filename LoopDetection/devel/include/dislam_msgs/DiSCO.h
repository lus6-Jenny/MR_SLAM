// Generated by gencpp from file dislam_msgs/DiSCO.msg
// DO NOT EDIT!


#ifndef DISLAM_MSGS_MESSAGE_DISCO_H
#define DISLAM_MSGS_MESSAGE_DISCO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace dislam_msgs
{
template <class ContainerAllocator>
struct DiSCO_
{
  typedef DiSCO_<ContainerAllocator> Type;

  DiSCO_()
    : stamp()
    , fftr()
    , ffti()
    , signature()
    , pose()  {
    }
  DiSCO_(const ContainerAllocator& _alloc)
    : stamp()
    , fftr(_alloc)
    , ffti(_alloc)
    , signature(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fftr_type;
  _fftr_type fftr;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ffti_type;
  _ffti_type ffti;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _signature_type;
  _signature_type signature;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::dislam_msgs::DiSCO_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dislam_msgs::DiSCO_<ContainerAllocator> const> ConstPtr;

}; // struct DiSCO_

typedef ::dislam_msgs::DiSCO_<std::allocator<void> > DiSCO;

typedef boost::shared_ptr< ::dislam_msgs::DiSCO > DiSCOPtr;
typedef boost::shared_ptr< ::dislam_msgs::DiSCO const> DiSCOConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dislam_msgs::DiSCO_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dislam_msgs::DiSCO_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dislam_msgs::DiSCO_<ContainerAllocator1> & lhs, const ::dislam_msgs::DiSCO_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.fftr == rhs.fftr &&
    lhs.ffti == rhs.ffti &&
    lhs.signature == rhs.signature &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dislam_msgs::DiSCO_<ContainerAllocator1> & lhs, const ::dislam_msgs::DiSCO_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dislam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dislam_msgs::DiSCO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dislam_msgs::DiSCO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dislam_msgs::DiSCO_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dislam_msgs::DiSCO_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dislam_msgs::DiSCO_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dislam_msgs::DiSCO_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dislam_msgs::DiSCO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3b54ec90639aa0f312784272d40b050";
  }

  static const char* value(const ::dislam_msgs::DiSCO_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3b54ec90639aa0fULL;
  static const uint64_t static_value2 = 0x312784272d40b050ULL;
};

template<class ContainerAllocator>
struct DataType< ::dislam_msgs::DiSCO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dislam_msgs/DiSCO";
  }

  static const char* value(const ::dislam_msgs::DiSCO_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dislam_msgs::DiSCO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float32[] fftr \n"
"float32[] ffti \n"
"float32[] signature\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dislam_msgs::DiSCO_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dislam_msgs::DiSCO_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.fftr);
      stream.next(m.ffti);
      stream.next(m.signature);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiSCO_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dislam_msgs::DiSCO_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dislam_msgs::DiSCO_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "fftr[]" << std::endl;
    for (size_t i = 0; i < v.fftr.size(); ++i)
    {
      s << indent << "  fftr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fftr[i]);
    }
    s << indent << "ffti[]" << std::endl;
    for (size_t i = 0; i < v.ffti.size(); ++i)
    {
      s << indent << "  ffti[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ffti[i]);
    }
    s << indent << "signature[]" << std::endl;
    for (size_t i = 0; i < v.signature.size(); ++i)
    {
      s << indent << "  signature[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.signature[i]);
    }
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DISLAM_MSGS_MESSAGE_DISCO_H
