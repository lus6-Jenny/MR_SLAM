// Generated by gencpp from file dislam_msgs/Loops.msg
// DO NOT EDIT!


#ifndef DISLAM_MSGS_MESSAGE_LOOPS_H
#define DISLAM_MSGS_MESSAGE_LOOPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dislam_msgs/Loop.h>

namespace dislam_msgs
{
template <class ContainerAllocator>
struct Loops_
{
  typedef Loops_<ContainerAllocator> Type;

  Loops_()
    : Loops()  {
    }
  Loops_(const ContainerAllocator& _alloc)
    : Loops(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::dislam_msgs::Loop_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dislam_msgs::Loop_<ContainerAllocator> >::other >  _Loops_type;
  _Loops_type Loops;





  typedef boost::shared_ptr< ::dislam_msgs::Loops_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dislam_msgs::Loops_<ContainerAllocator> const> ConstPtr;

}; // struct Loops_

typedef ::dislam_msgs::Loops_<std::allocator<void> > Loops;

typedef boost::shared_ptr< ::dislam_msgs::Loops > LoopsPtr;
typedef boost::shared_ptr< ::dislam_msgs::Loops const> LoopsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dislam_msgs::Loops_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dislam_msgs::Loops_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dislam_msgs::Loops_<ContainerAllocator1> & lhs, const ::dislam_msgs::Loops_<ContainerAllocator2> & rhs)
{
  return lhs.Loops == rhs.Loops;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dislam_msgs::Loops_<ContainerAllocator1> & lhs, const ::dislam_msgs::Loops_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dislam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dislam_msgs::Loops_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dislam_msgs::Loops_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dislam_msgs::Loops_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dislam_msgs::Loops_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dislam_msgs::Loops_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dislam_msgs::Loops_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dislam_msgs::Loops_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98d0c6cc3ee49f9066dc90163982613f";
  }

  static const char* value(const ::dislam_msgs::Loops_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98d0c6cc3ee49f90ULL;
  static const uint64_t static_value2 = 0x66dc90163982613fULL;
};

template<class ContainerAllocator>
struct DataType< ::dislam_msgs::Loops_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dislam_msgs/Loops";
  }

  static const char* value(const ::dislam_msgs::Loops_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dislam_msgs::Loops_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Loop[] Loops\n"
"================================================================================\n"
"MSG: dislam_msgs/Loop\n"
"int64 id0\n"
"int64 id1\n"
"geometry_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dislam_msgs::Loops_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dislam_msgs::Loops_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Loops);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Loops_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dislam_msgs::Loops_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dislam_msgs::Loops_<ContainerAllocator>& v)
  {
    s << indent << "Loops[]" << std::endl;
    for (size_t i = 0; i < v.Loops.size(); ++i)
    {
      s << indent << "  Loops[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dislam_msgs::Loop_<ContainerAllocator> >::stream(s, indent + "    ", v.Loops[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DISLAM_MSGS_MESSAGE_LOOPS_H
